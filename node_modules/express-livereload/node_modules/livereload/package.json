{
  "name": "livereload",
  "description": "LiveReload server",
  "version": "0.3.2",
  "contributors": [
    {
      "name": "Joshua Peek"
    },
    {
      "name": "Brian P. Hogan",
      "email": "brianhogan@napcs.com"
    },
    {
      "name": "Hiroaki Yamane",
      "email": "i.am@mnmly.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/napcs/node-livereload/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/napcs/node-livereload.git"
  },
  "bin": {
    "livereload": "./bin/livereload.js"
  },
  "main": "./lib/livereload.js",
  "dependencies": {
    "commander": "*",
    "websocket.io": ">= 0.1.0",
    "watchr": "~2.1.3"
  },
  "devDependencies": {
    "request": ">= 2.9.203",
    "should": ">= 0.6.3",
    "ws": ">= 0.4.20",
    "mocha": ">= 1.0.3"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "node-livereload\r\n===============\r\n\r\nAn implementation of the LiveReload server in Node.js. It's an alternative to the graphical [http://livereload.com/](http://livereload.com/) application, which monitors files for changes and reloads your web browser.\r\n\r\n# Example Usage\r\n\r\nFirst, install the LiveReload browser plugins by visiting [http://help.livereload.com/kb/general-use/browser-extensions](http://help.livereload.com/kb/general-use/browser-extensions).\r\n\r\nTo use livereload from the command line:\r\n\r\n    $ npm install -g git://github.com/mnmly/node-livereload.git\r\n    # Delay of 1000ms and ignore build.js and build.css, on port 3030\r\n    $ livereload -d 1000 -e build.js,build.css -p 3030\r\n    \r\n\r\nOr to use the api within a project:\r\n\r\n    $ npm install livereload\r\n\r\nThen, simply create a server and fire it up.\r\n\r\n    livereload = require('livereload');\r\n    server = livereload.createServer();\r\n    server.watch(__dirname + \"/public\");\r\n\r\nYou can also use this with a Connect server:\r\n\r\n    connect = require('connect');\r\n    connect.createServer(\r\n      connect.compiler({ src: __dirname + \"/public\", enable: ['less'] }),\r\n      connect.staticProvider(__dirname + \"/public\")\r\n    ).listen(3000);\r\n\r\n    livereload = require('livereload');\r\n    server = livereload.createServer({exts: ['less']});\r\n    server.watch(__dirname + \"/public\");\r\n\r\n# Options\r\n\r\nThe `createServer()` method supports a few basic options, passed as a JavaScript object:\r\n\r\n* `port` is the listening port. It defaults to `35729` which is what the LiveReload extensions use currently.\r\n* `exts` is an array of extensions you want to observe. The default extensions are  `html`, `css`, `js`, `png`, `gif`, `jpg`,\r\n  `php`, `php5`, `py`, `rb`, and `erb`\r\n* `applyJSLive` tells LiveReload to reload JavaScript files in the background instead of reloading the page. The default for this is `false`.\r\n* `applyCSSLive` tells LiveReload to reload CSS files in the background instead of refreshing the page. The default for this is `true`.\r\n* `exclusions` lets you specify files to ignore. By default, this includes `.git/`, `.svn/`, and `.hg/`\r\n* `alias` lets you specify file extensions to be aliased. By default, this maps `.styl` to `.css`, by which, changing `.styl` file never fires full page reload.\r\n\r\n# Limitations\r\n\r\nRight now this is extremely simple. It relies on polling so there's a delay in refreshing the browser. It could be faster.\r\n\r\n# License\r\n\r\nCopyright (c) 2010-2012 Joshua Peek and Brian P. Hogan.\r\n\r\nReleased under the MIT license. See `LICENSE` for details.\r\n\r\n",
  "readmeFilename": "README.md",
  "_id": "livereload@0.3.2",
  "dist": {
    "shasum": "f070f1c0030d66324c3a35e34511fa18e2e86412"
  },
  "_from": "livereload@git://github.com/mnmly/node-livereload.git"
}
